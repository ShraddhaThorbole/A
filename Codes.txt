//////////Assignment 1 - Parallel port interfacing of LEDs like flashing.

#include<pic18F4550.h>

void delay() {
	unsigned int i;
	for(i=0; i<30000; i++); // Delay function 
}
int main() {
	unsigned char i;
	TRISB = 0x00; // Set PORTB as output LATB = 0x00; // Initialize PORTB to 0

	while(1) {
		for(i=0; i<5; i++) {
		LATB = 0xFF; 
		delay();
		LATB = 0x00; 
		delay();
	} 
return 0;
}


//Assignment 2 - LED,BUZZER,RELAY key pressed

#include<pic8F4550.h>

void delay() {
    unsigned int i;
    for(i=0; i<300000; i++);
}

int main() {
    unsigned char i, key=0;
    
    TRISB = 0x00;
    LATB = 0x00;
    TRISDbits.RD2 = 0;
    TRISDbits.RA4 = 0;
    TRISDbits.RD0 = 1;
    TRISDbits.RD1 = 1;

    while(1) {
        if(PORTDbits.RD0 == 0) {
            LATAbits.LA4 = 1;
            LATDbits.LD2 = 0;
            for(i=0; i<8; i++) {
                LATB = 1 << i;
                delay();
                LATB = 0x00;
		delay();
            }
        }

        else if(PORTDbits.RD1 == 0) {
            LATAbits.LA4 = 0;
            LATDbits.LD2 = 1;
            for(i=7; i>0; i--) {
                LATB = 1 << i;
                delay();
                LATB = 0x00;
                delay();
            }
        }
    }
    return 0;
}


///Assignment 3 - Keypad

#include <p18f4550.h>
#define LCD_EN LATCbits.LC1
#define LCD_RS LATCbits.LC0
#define LCDPORT LATB

const unsigned char KeyLookupTbl[]={'1','4','7','.',
   				    '2','5','8','0',
				    '3','6','9','#',
				    'A','B','C','D'};

void lcd_delay(unsigned int time)
{
 unsigned int i , j ;

    for(i = 0; i < time; i++)
    {
            for(j=0;j<20;j++);
    }
}


void SendInstruction(unsigned char command)
{
     LCD_RS = 0;		// RS low : Instruction
     LCDPORT = command;
     LCD_EN = 1;		// EN High
     lcd_delay(10);
     LCD_EN = 0;		// EN Low; command sampled at EN falling edge
     lcd_delay(10);
}

void SendData(unsigned char lcddata)
{
     LCD_RS = 1;		// RS HIGH : DATA
     LCDPORT = lcddata;
     LCD_EN = 1;		// EN High
     lcd_delay(10);
     LCD_EN = 0;		// EN Low; data sampled at EN falling edge
     lcd_delay(10);
}

void InitLCD(void)
{
    TRISB = 0x00; //set data port as output
    TRISCbits.RC0 = 0; //EN pin
    TRISCbits.RC1 = 0; // RS pin

    SendInstruction(0x38);      //8 bit mode, 2 line,5x7 dots
    SendInstruction(0x06);	// entry mode
    SendInstruction(0x0C);	//Display ON cursor OFF
    SendInstruction(0x01);      //Clear display
    SendInstruction(0x80);      //set address to 0
}



/*Reads a Single key*/
//Returns the ascii value of the key
unsigned char ReadKey(void)
{
 unsigned char row,val, i, j, key=0;

 while(1)                                   //Loop till a key is pressed
 {
   LATD = 0xFF;
   for(i=0x01;i<0x10;i=i<<1)
   {
       LATD = ~i;                           //Make output pin of PORTD low, one column at a time
       lcd_delay(2);
       row = PORTD>>4;                      //Scan rows
       for(j=0x01;j<0x10;j=j<<1)
       {
           if((row & j) == 0)                 //Check which row scanned is low
           {
               val = KeyLookupTbl[key];     //If a key is pressed, find and return the corresponding character
               return val;
           }
           else
               key++;                       //If key not pressed, increament key counter value
       }
   }

 }
}

void main()
{
    unsigned char Key, str[16];
    unsigned char *string1 = "Key Pressed = ";
    TRISB = 0x00;                           //LCD pins as output
    LATB = 0x00;
    PORTE = 0x80;
    TRISD = 0xF0;                           //rows as inputs and columns as output
    LATD = 0xFF;

    InitLCD();
    SendInstruction(0x80);                  //set 1st line
    while(*string1)
        SendData(*string1++);


     while(1)                               //Forever loop
    {
        Key = ReadKey();                    //Check the key pressed
        SendInstruction(0xC0);              //set 2nd line
        SendData(Key);
        lcd_delay(100);
     }
}



//////Assignment 4 - Interrupt with replay


#include<pic18F4550.h>

void external_interrupt_init();

//void interrupt ISR();

void delay();

void main()
{

    TRISBbits.RB1 = 1;
    TRISAbits.RA4 = 0;

    LATAbits.LA4=0;
    external_interrupt_init();

    while(1)
    {

    }
}

void external_interrupt_init()
{
    INTCON2=0X00;
    INTCON3bits.INT1IF=0;
    INTCON3bits.INT1IE=1;
    INTCONbits.GIE=1;
}

void interrupt ISR()
{
             LATAbits.LA4 = ~LATAbits.LA4;
             delay();
             INTCON3bits.INT1IF=0;
        
}

void delay()
{
    for(int i=0;i<3000;i++)
         for(int i=0;i<300;i++);
}



///Assignment 5 - interrupt with timer

#include<pic18f4550.h>

void delay()
{
    T0CON=0X06;
    TMR0H=0X67;
    TMR0L=0X69;
    T0CONbits.TMR0ON=1;

    while(INTCONbits.TMR0IF==0);
         T0CONbits.TMR0ON=0;
    
     INTCONbits.TMR0IF=0;

}

int main()
{
    TRISB=0X00;
    LATB=0XFF;

    while(1){
        LATB=~LATB;
        delay();
    }
    return 0;
}


////Assignment 6 - UART

#include<pic18f4550.h> 
#include<stdio.h>
#define FOSC 48000000UL

void InitUART(unsigned int baudrate){
	TRISCbits.RC6=0;
	TRISCbits.RC7=1;
	INTCONbits.GIE=1;
	INTCONbits.PEIE=1;
	SPBRG=77
	//SPBRG=(unsigned char)(((FOSC/64)/baudrate)-1); 
	BAUDCON=0b00000000;
	TXSTA=0b00100000;
	RCSTA=0b10010000; 
}
void SendChar(unsigned char data){ 
	while(TXSTAbits.TRMT==0); 
		TXREG=data;
}
void putch(unsigned char data){
	SendChar(data); 
}
unsigned char GetChar(void){ 
	while(! PIR1bits.RCIF); 
	return RCREG;
}
void main(void){
	InitUART(9600);
	printf("\r\nHello MicroPIC-18F: Enter any key from keyboard\r\n"); 
	while(1){
	printf("%c",GetChar()); 
	}
	while(1); 
}



/////////Assignment 7 - PWM with DC motor

#include<pic18f4550.h>

#include<pic18f4550.h> 
void main()
{
	TRISCbits.RC2=0; 
	CCP1CON=0X0C; 
	T2CON=0X03; 
	PR2=0XF9; 
	CCPR1L=0X64; 
	TMR2=0; 
	TMR2ON=1; 
	while(1);
}















